/* ************************************************************************
*  Copyright (C) 1990, 1991 - see 'license.doc' for complete information. *
************************************************************************* */


		      HANDLING 'SOCIALS' IN CIRCLEMUD


A general system exists to handle the 'social' commands -- those which
generally have no game-related purpose other than to convey emotions
between players.   Socials are also useful for creating advanced DikuMUD
adventures and quests through the use of speical procedures; for example,
you could add a 'detonate' social which, within your quest, is handled by
a special procedure to cause something to explode.

Socials are all handled through the generalized command do_action.  The
text file lib/text/socials contains information on the game's socials.
New socials can be added by 1) adding the name and level of the social
to the master command list in interpreter.c (giving do_action as the
function pointer), and 2) adding information for the new social to the
lib/text/socials file.

In Circle 3.0, socials in the file are specified by name (instead of by
command number, as was true of the original Diku and versions of Circle
before 3.0.).  In the standard Circle distribution, the socials appear
in alphabetical order in the file, but they can appear in any order and
can be rearranged if necessary.


The file is formatted as follows:

--------------------------------------------
<command name> <hide-flag> <minimum position of victim>
1<messg to character if no argument>
2<messg to others if no argument>
3<messg to char if victim found>           <---If this field is empty,
4<messg to others if victim found>          <- 
5<messg to victim>                            | then these fields must be
6<messg to char if victim not found>          | skipped, and the action will
7<messg to char if vict is char>              | ignore arguments.
8<messg to others if vict is char>          <-

<command name> <hide-flag> <minimum position of victim>
.
.
.
.
.


$~
-------------------------------------------------

Each social must contain either 1) only the first two messages (if the social
ignores arguments), or 2) all eight messages (if the social takes an argument).
Each message must be contained in one line.

The command-name indicates which social is being specified.  The hide-flag
can be either 0 or 1; if 1, the social is hidden from OTHERS if they cannot
see the character performing the social.  The action is not hidden from the
VICTIM, even if s/he cannot see the character performing the social, although
in such cases the character's name will, of course, be replaced with "someone".

Where it makes sense to do so, text fields may be left empty. This is done by
putting a '#' in the first column on the line.  Doing so is legal in the
following fields:

a: messg to others if no arg
b: messg to others if victim found
c: messg to others if vict is char

Note again that if the field _messg to char if victim found_ is empty, then
the following fields must be omitted entirely (not even the '~'), and the
action will ignore any arguments supplied.

The procedure sends the text strings through act(), and they may contain
control codes (see the documentation for the act() function for details.)
Note that not all of act()'s control codes may be used; for example, codes
which refer to objects such as $p.

For the sake of efficiency, no tests or sanity checks are made on the
consistency or logic of the act() codes found in the social messages.
Hence, grave disorder may result if, say, the code '$N' occurs in a text
field that doesn't refer to a victim; like _messg to others if no arg_.
----------------------------------------------------------------------------

   CONTROL CHARACTERS

Each control character is preceded by a '$'.

  $n - Write name, short description, or "someone", for ch, depending on
       whether ch is a PC, a NPC, or an invisible PC/NPC.

  $N - Like $n, except insert the text for vict_obj. NOTE: vict_obj must
       point to an object of type struct char_data.

  $m - "him", "her", or "it", depending on the gender of ch.

  $M - Like $m, for vict_obj. NOTE: vict_obj must be a pointer of type
       struct char_data.

  $s - "his", "her", or "it", depending on the gender of ch.

  $S - Like $s, for vict_obj.

  $e - "he", "she", "it", depending on the gender of ch.

  $E - Like $e, for vict_obj.

  $o - Name or "something" for obj, depending on visibility.

  $O - Like $o, for vict_obj. NOTE: vict_obj must be a pointer of type
       struct obj_data.

  $p - Short description or "something" for obj.

  $P - Like $p for vict_obj.

  $a - "an" or "a", depending on the first character of obj's name.

  $A - Like $a, for vict_obj.

  $T - Prints the string pointed to by vict_obj.

  $F - Processes the string pointed to by vict_obj with fname() prior to
       printing.

  $$ - Print the character '$'.

    HIDE_INVISIBLE

If this parameter is nonzero, the action will be hidden to those who are
unable to see ch.

   TYPE

This value determines who the string is sent to. It may take one of four
values (the macros are defined in comm.h).

TO_ROOM     - Send the string to everybody in the room, except ch.
TO_VICT     - Send the string to the character (!) pointed to by vict_obj.
TO_NOTVICT  - Send the string to everybody in the room except ch and vict_obj.
TO_CHAR     - Send the string to the ch.


EXAMPLES

moon 1 0
You moon everyone in the room.
$n drops $s drawers and moons everyone in the room.
You turn, drop your drawers, and shine your butt at $N.
$n turns, drops $s drawers and shoots a moon at $N.
$n turns, drops $s drawers and moons you!
You turn, drop your drawers, stumble, and fall flat on your face.
You start chasing your tail.
$n starts chasing $s tail.



grin 0 0
You grin evilly.
$n grins evilly.
You flash an evil grin at $N.
$n flashes an evil grin at $N.
$n flashes you an evil grin.
You flash an evil grin at the walls around you.
You flash an evil grin at yourself - now THAT'S a neat trick.
$n starts grinning to $mself.


